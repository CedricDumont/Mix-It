<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thinktecture.IdentityServer.Core</name>
    </assembly>
    <members>
        <member name="T:Thinktecture.IdentityServer.Core.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Logging.ILog.Log(Thinktecture.IdentityServer.Core.Logging.LogLevel,System.Func{System.String})">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <remarks>
            Note to implementors: the message func should not be called if the loglevel is not enabled
            so as not to incur perfomance penalties.
            </remarks>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Logging.ILog.Log``1(Thinktecture.IdentityServer.Core.Logging.LogLevel,System.Func{System.String},``0)">
            <summary>
            Log a message and exception at the specified log level.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">The exception.</param>
            <remarks>
            Note to implementors: the message func should not be called if the loglevel is not enabled
            so as not to incur perfomance penalties.
            </remarks>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:Thinktecture.IdentityServer.Core.Logging.ILog"/>
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:Thinktecture.IdentityServer.Core.Logging.ILog"/> objects.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:Thinktecture.IdentityServer.Core.Logging.ILog"/></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:Thinktecture.IdentityServer.Core.Logging.ILog"/></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Logging.LogProvider.GetLogger(System.Type)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <returns>An instance of <see cref="T:Thinktecture.IdentityServer.Core.Logging.ILog"/></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:Thinktecture.IdentityServer.Core.Logging.ILog"/></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Logging.LogProvider.SetCurrentLogProvider(Thinktecture.IdentityServer.Core.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Logging.LogProviders.ColouredConsoleLogProvider.MessageFormatterDelegate">
            <summary>
            A delegate returning a formatted log message
            </summary>
            <param name="loggerName">The name of the Logger</param>
            <param name="level">The Log Level</param>
            <param name="message">The Log Message</param>
            <param name="e">The Exception, if there is one</param>
            <returns>A formatted Log Message string.</returns>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.DiagnosticsOptions.EnableWebApiDiagnostics">
            <summary>
            Gets or sets a value indicating whether web API diagnostics should be enabled.
            </summary>
            <value>
            <c>true</c> if web API diagnostics should be enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.DiagnosticsOptions.WebApiDiagnosticsIsVerbose">
            <summary>
            Gets or sets a value indicating whether web API diagnostics logging should be set to verbose.
            </summary>
            <value>
            <c>true</c> if web API diagnostics logging shozld be verbose; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Configuration.LoginPageLink">
            <summary>
            Represents a link on the login page
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.LoginPageLink.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.LoginPageLink.Href">
            <summary>
            Gets or sets the href.
            </summary>
            <value>
            The href.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.IClientStore">
            <summary>
            Retrieval of client configuration
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IClientStore.FindClientByIdAsync(System.String)">
            <summary>
            Finds a client by id
            </summary>
            <param name="clientId">The client id</param>
            <returns>The client</returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.IUserService">
            <summary>
            This interface connects identity server to your user and profile store
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IUserService.PreAuthenticateAsync(Thinktecture.IdentityServer.Core.Models.SignInMessage)">
            <summary>
            This methods gets called before the login page is shown. This allows you to authenticate the user somehow based on data coming from the host (e.g. client certificates or trusted headers)
            </summary>
            <param name="message">The signin message.</param>
            <returns>The authentication result or null to continue the flow</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IUserService.AuthenticateLocalAsync(System.String,System.String,Thinktecture.IdentityServer.Core.Models.SignInMessage)">
            <summary>
            This methods gets called for local authentication (whenever the user uses the username and password dialog).
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="message">The signin message. Might be null if called from the token endpoint.</param>
            <returns>The authentication result</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IUserService.AuthenticateExternalAsync(Thinktecture.IdentityServer.Core.Models.ExternalIdentity,Thinktecture.IdentityServer.Core.Models.SignInMessage)">
            <summary>
            This method gets called when the user uses an external identity provider to authenticate.
            </summary>
            <param name="externalUser">The external user.</param>
            <param name="message">The signin message.</param>
            <returns>
            The authentication result.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IUserService.SignOutAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            This method gets called when the user signs out (allows to cleanup resources)
            </summary>
            <param name="subject">The subject.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IUserService.GetProfileDataAsync(System.Security.Claims.ClaimsPrincipal,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This method is called whenever claims about the user are requested (e.g. during token creation or via the userinfo endpoint)
            </summary>
            <param name="subject">The subject.</param>
            <param name="requestedClaimTypes">The requested claim types. The user service is expected to filter based upon the requested claim types. Null is passed if there is no filtering to be performed.</param>
            <returns>Claims</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IUserService.IsActiveAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            This method gets called whenever identity server needs to determine if the user is valid or active (e.g. during token issuance or validation)
            </summary>
            <param name="subject">The subject.</param>
            <returns>true is the user is still allowed to receive tokens, false otherwise.</returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.IScopeStore">
            <summary>
            Scope retrieval
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IScopeStore.FindScopesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all scopes.
            </summary>
            <returns>List of scopes</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IScopeStore.GetScopesAsync(System.Boolean)">
            <summary>
            Gets all defined scopes.
            </summary>
            <param name="publicOnly">if set to <c>true</c> only public scopes are returned.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.Default.CorrelationManagerRequestIdService">
            <summary>
            CorrelationManager implementation for request IDs
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.IRequestIdService">
            <summary>
            Abstraction for dealing with request IDs (logging, events, error pages etc)
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IRequestIdService.GetRequestId">
            <summary>
            Gets the request identifier.
            </summary>
            <returns>Request id</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.CorrelationManagerRequestIdService.GetRequestId">
            <summary>
            Gets the request identifier.
            </summary>
            <returns>
            Request id
            </returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Resources.Events">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Events.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Events.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Events.LocalLoginSuccess">
            <summary>
              Looks up a localized string similar to Local Login Success.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Endpoints.IdentityTokenValidationController">
            <summary>
            Endpoint for validating identity tokens
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.IdentityTokenValidationController.Get">
            <summary>
            GET
            </summary>
            <returns>Claims if token is valid</returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Resources.Scopes">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Scopes.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Scopes.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Scopes.address_DisplayName">
            <summary>
              Looks up a localized string similar to Your postal address.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Scopes.all_claims_DisplayName">
            <summary>
              Looks up a localized string similar to All user information.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Scopes.email_DisplayName">
            <summary>
              Looks up a localized string similar to Your email address.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Scopes.offline_access_DisplayName">
            <summary>
              Looks up a localized string similar to Offline access.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Scopes.openid_DisplayName">
            <summary>
              Looks up a localized string similar to Your user identifier.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Scopes.phone_DisplayName">
            <summary>
              Looks up a localized string similar to Your phone number.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Scopes.profile_Description">
            <summary>
              Looks up a localized string similar to Your user profile information (first name, last name, etc.).
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Scopes.profile_DisplayName">
            <summary>
              Looks up a localized string similar to User profile.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Scopes.roles_DisplayName">
            <summary>
              Looks up a localized string similar to User roles.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultClientPermissionsService">
            <summary>
            Default client permission service
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.IClientPermissionsService">
            <summary>
            Service to manage client permissions (refresh and access tokens, consent)
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IClientPermissionsService.GetClientPermissionsAsync(System.String)">
            <summary>
            Gets the client permissions asynchronous.
            </summary>
            <param name="subject">The subject identifier.</param>
            <returns>A list of client permissions</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IClientPermissionsService.RevokeClientPermissionsAsync(System.String,System.String)">
            <summary>
            Revokes the client permissions asynchronous.
            </summary>
            <param name="subject">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultClientPermissionsService.#ctor(Thinktecture.IdentityServer.Core.Services.IPermissionsStore,Thinktecture.IdentityServer.Core.Services.IClientStore,Thinktecture.IdentityServer.Core.Services.IScopeStore,Thinktecture.IdentityServer.Core.Services.ILocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultClientPermissionsService"/> class.
            </summary>
            <param name="permissionsStore">The permissions store.</param>
            <param name="clientStore">The client store.</param>
            <param name="scopeStore">The scope store.</param>
            <param name="localizationService">The localization service.</param>
            <exception cref="T:System.ArgumentNullException">permissionsStore
            or
            clientStore
            or
            scopeStore</exception>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultClientPermissionsService.GetClientPermissionsAsync(System.String)">
            <summary>
            Gets the client permissions asynchronous.
            </summary>
            <param name="subject">The subject identifier.</param>
            <returns>
            A list of client permissions
            </returns>
            <exception cref="T:System.ArgumentNullException">subject</exception>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultClientPermissionsService.RevokeClientPermissionsAsync(System.String,System.String)">
            <summary>
            Revokes the client permissions asynchronous.
            </summary>
            <param name="subject">The subject identifier.</param>
            <param name="clientId">The client identifier.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            subject
            or
            clientId
            </exception>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.ITransientDataRepository`1">
            <summary>
            Abstraction for storing transient data (e.g. authorization codes, refresh and reference tokens)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ITransientDataRepository`1.StoreAsync(System.String,`0)">
            <summary>
            Stores the data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ITransientDataRepository`1.GetAsync(System.String)">
            <summary>
            Retrieves the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ITransientDataRepository`1.RemoveAsync(System.String)">
            <summary>
            Removes the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ITransientDataRepository`1.GetAllAsync(System.String)">
            <summary>
            Retrieves all data for a subject identifier.
            </summary>
            <param name="subject">The subject identifier.</param>
            <returns>A list of token metadata</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ITransientDataRepository`1.RevokeAsync(System.String,System.String)">
            <summary>
            Revokes all data for a client and subject id combination.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.IRefreshTokenStore">
            <summary>
            Refresh token storage
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.IAuthorizationCodeStore">
            <summary>
            Abstraction for storing authorization codes
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.ITokenHandleStore">
            <summary>
            Token handle storage
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryConsentStore">
            <summary>
            In-memory consent store
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Configuration.AuthenticationOptions">
            <summary>
            Allows customizing the login view
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Configuration.AuthenticationOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Configuration.AuthenticationOptions"/> class.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.AuthenticationOptions.EnableLocalLogin">
            <summary>
            Gets or sets a value indicating whether local login is enabled.
            Disabling this setting will not display the username/password form on the login page. This also will disable the resource owner password flow.
            </summary>
            <value>
              <c>true</c> if local login is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.AuthenticationOptions.CookieOptions">
            <summary>
            Gets or sets the cookie options.
            </summary>
            <value>
            The cookie options.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.AuthenticationOptions.LoginPageLinks">
            <summary>
            Gets or sets the login page links.
            LoginPageLinks allow the login view to provide the user custom links to other web pages that they might need to visit before they can login (such as a registration page, or a password reset page).
            </summary>
            <value>
            The login page links.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.AuthenticationOptions.EnableSignOutPrompt">
            <summary>
            Gets or sets a value indicating whether IdentityServer will show a confirmation page for sign-out.
            When a client initiates a sign-out, by default IdentityServer will ask the user for confirmation. This is a mitigation technique against "logout spam".
            </summary>
            <value>
            <c>true</c> if sign-out prompt is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.AuthenticationOptions.RememberLastUsername">
            <summary>
            Gets or sets a value indicating whether IdentityServer will remember the last username entered on the login page.
            </summary>
            <value>
            <c>true</c> if the last username will be remembered; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.AuthenticationOptions.IdentityProviders">
            <summary>
            Allows configuring additional identity providers
            </summary>
            <value>
            A callback function for configuring identity providers.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultRefreshTokenService">
            <summary>
            Default refresh token service
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.IRefreshTokenService">
            <summary>
            Implements refresh token creation and validation
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IRefreshTokenService.CreateRefreshTokenAsync(Thinktecture.IdentityServer.Core.Models.Token,Thinktecture.IdentityServer.Core.Models.Client)">
            <summary>
            Creates the refresh token.
            </summary>
            <param name="accessToken">The access token.</param>
            <param name="client">The client.</param>
            <returns>The refresh token handle</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IRefreshTokenService.UpdateRefreshTokenAsync(System.String,Thinktecture.IdentityServer.Core.Models.RefreshToken,Thinktecture.IdentityServer.Core.Models.Client)">
            <summary>
            Updates the refresh token.
            </summary>
            <param name="handle">The handle.</param>
            <param name="refreshToken">The refresh token.</param>
            <param name="client">The client.</param>
            <returns>The refresh token handle</returns>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultRefreshTokenService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultRefreshTokenService._store">
            <summary>
            The refresh token store
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultRefreshTokenService.#ctor(Thinktecture.IdentityServer.Core.Services.IRefreshTokenStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultRefreshTokenService"/> class.
            </summary>
            <param name="store">The refresh token store.</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultRefreshTokenService.CreateRefreshTokenAsync(Thinktecture.IdentityServer.Core.Models.Token,Thinktecture.IdentityServer.Core.Models.Client)">
            <summary>
            Creates the refresh token.
            </summary>
            <param name="accessToken">The access token.</param>
            <param name="client">The client.</param>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultRefreshTokenService.UpdateRefreshTokenAsync(System.String,Thinktecture.IdentityServer.Core.Models.RefreshToken,Thinktecture.IdentityServer.Core.Models.Client)">
            <summary>
            Updates the refresh token.
            </summary>
            <param name="handle">The handle.</param>
            <param name="refreshToken">The refresh token.</param>
            <param name="client">The client.</param>
            <returns>
            The refresh token handle
            </returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenSigningService">
            <summary>
            Default token signing service
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.ITokenSigningService">
            <summary>
            Logic for signing security tokens
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ITokenSigningService.SignTokenAsync(Thinktecture.IdentityServer.Core.Models.Token)">
            <summary>
            Signs the token.
            </summary>
            <param name="token">The token.</param>
            <returns>A protected and serialized security token</returns>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenSigningService._options">
            <summary>
            The identity server options
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenSigningService.#ctor(Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenSigningService"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenSigningService.SignTokenAsync(Thinktecture.IdentityServer.Core.Models.Token)">
            <summary>
            Signs the token.
            </summary>
            <param name="token">The token.</param>
            <returns>
            A protected and serialized security token
            </returns>
            <exception cref="T:System.InvalidOperationException">Invalid token type</exception>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenSigningService.CreateJsonWebToken(Thinktecture.IdentityServer.Core.Models.Token,System.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Creates the json web token.
            </summary>
            <param name="token">The token.</param>
            <param name="credentials">The credentials.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions">
            <summary>
            The IdentityServerOptions class is the top level container for all configuration settings of IdentityServer.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions"/> class with default values.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.SiteName">
            <summary>
            Gets or sets the display name of the site used in standard views.
            </summary>
            <value>
            Display name of the site used in standard views.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.IssuerUri">
            <summary>
            Gets or sets the unique name of this server instance, e.g. https://myissuer.com
            </summary>
            <value>
            Unique name of this server instance, e.g. https://myissuer.com
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.SigningCertificate">
            <summary>
            Gets or sets the X.509 certificate (and corresponding private key) for signing security tokens.
            </summary>
            <value>
            The signing certificate.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.SecondarySigningCertificate">
            <summary>
            Gets or sets a secondary certificate that will appear in the discovery document. Can be used to prepare clients for certificate rollover
            </summary>
            <value>
            The secondary signing certificate.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.RequireSsl">
            <summary>
            Gets or sets a value indicating whether SSL is required for IdentityServer. Defaults to `true`.
            </summary>
            <value>
              <c>true</c> if SSL is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.PublicHostName">
            <summary>
            Gets or sets the name of the public host.
            </summary>
            <value>
            The name of the public host.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.Factory">
            <summary>
            Gets or sets the identity server factory.
            </summary>
            <value>
            The factory.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.DataProtector">
            <summary>
            Gets or sets the data protector.
            </summary>
            <value>
            The data protector.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.Endpoints">
            <summary>
            Gets or sets the endpoint configuration.
            </summary>
            <value>
            The endpoints configuration.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.AuthenticationOptions">
            <summary>
            Gets or sets the authentication options.
            </summary>
            <value>
            The authentication options.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.PluginConfiguration">
            <summary>
            Gets or sets the plugin configuration.
            </summary>
            <value>
            The plugin configuration.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.CorsPolicy">
            <summary>
            Gets or sets the CORS policy.
            </summary>
            <value>
            The CORS policy.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.ProtocolLogoutUrls">
            <summary>
            Gets or sets the protocol logout urls.
            </summary>
            <value>
            The protocol logout urls.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.CspOptions">
            <summary>
            Gets or sets the CSP options.
            </summary>
            <value>
            The CSP options.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions.DiagnosticsOptions">
            <summary>
            Gets or sets the diagnostics options.
            </summary>
            <value>
            The diagnostics options.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory">
            <summary>
            Use this class to replace built-in services, or add additional dependencies to the container
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.#cctor">
            <summary>
            Initializes the <see cref="T:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory"/> class.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory"/> class.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.Register``1(Thinktecture.IdentityServer.Core.Configuration.Registration{``0})">
            <summary>
            Adds a registration to the dependency list
            </summary>
            <typeparam name="T">Type of the dependency</typeparam>
            <param name="registration">The registration.</param>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.Registrations">
            <summary>
            Gets the a list of additional dependencies.
            </summary>
            <value>
            The dependencies.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.UserService">
            <summary>
            Gets or sets the user service. The user service implements user authentication against the local user store as well as association of external users. There are standard implementations for in-memory, MembershipReboot and ASP.NET Identity
            </summary>
            <value>
            The user service.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.ScopeStore">
            <summary>
            Gets or sets the scope store. The scope store implements retrieval of scopes configuration data.
            </summary>
            <value>
            The scope store.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.ClientStore">
            <summary>
            Gets or sets the client store. The client store implements retrieval of client configuration data.
            </summary>
            <value>
            The client store.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.AuthorizationCodeStore">
            <summary>
            Gets or sets the authorization code store - implements storage and retrieval of authorization codes.
            </summary>
            <value>
            The authorization code store.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.TokenHandleStore">
            <summary>
            Gets or sets the token handle store - Implements storage and retrieval of handles for reference tokens.
            </summary>
            <value>
            The token handle store.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.ConsentStore">
            <summary>
            Gets or sets the consent store - Implements storage and retrieval of consent decisions.
            </summary>
            <value>
            The consent store.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.RefreshTokenStore">
            <summary>
            Gets or sets the refresh token store - Implements storage and retrieval of refresh tokens.
            </summary>
            <value>
            The refresh token store.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.ViewService">
            <summary>
            Gets or sets the view service - Implements retrieval of UI assets. Defaults to using the embedded assets.
            </summary>
            <value>
            The view service.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.ConsentService">
            <summary>
            Gets or sets the consent service - Implements logic of consent decisions 
            </summary>
            <value>
            The consent service.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.ClientPermissionsService">
            <summary>
            Gets or sets the client permissions service - Implements retrieval and revocation of consents, reference and refresh tokens.
            </summary>
            <value>
            The client permissions service.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.CustomGrantValidator">
            <summary>
            Gets or sets the custom grant validator - Implements validation of custom grant types.
            </summary>
            <value>
            The custom grant validator.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.CustomRequestValidator">
            <summary>
            Gets or sets the custom request validator - Implements custom additional validation of authorize and token requests.
            </summary>
            <value>
            The custom request validator.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.ClaimsProvider">
            <summary>
            Gets or sets the claims provider - Implements retrieval of claims for identity and access tokens.
            </summary>
            <value>
            The claims provider.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.TokenService">
            <summary>
            Gets or sets the token service - Implements creation of security tokens definitions.
            </summary>
            <value>
            The token service.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.RefreshTokenService">
            <summary>
            Gets or sets the refresh token service - Implements creation and updates of refresh tokens.
            </summary>
            <value>
            The refresh token service.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.TokenSigningService">
            <summary>
            Gets or sets the token signing service - Implements creation and signing of security tokens.
            </summary>
            <value>
            The token signing service.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.ExternalClaimsFilter">
            <summary>
            Gets or sets the external claims filter - Implements filtering and transformation of claims for external identity providers.
            </summary>
            <value>
            The external claims filter.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.EventService">
            <summary>
            Gets or sets the event service.
            </summary>
            <value>
            The event service.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.CustomTokenValidator">
            <summary>
            Gets or sets the custom token validator - Implements custom additional validation of tokens for the token validation endpoints.
            </summary>
            <value>
            The custom token validator.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.RedirectUriValidator">
            <summary>
            Gets or sets the redirect URI validator.
            </summary>
            <value>
            The redirect URI validator.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Configuration.IdentityServerServiceFactory.LocalizationService">
            <summary>
            Gets or sets the localization service.
            </summary>
            <value>
            The localization service.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Endpoints.AccessTokenValidationController">
            <summary>
            Endpoint for validating access tokens
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.AccessTokenValidationController.Get">
            <summary>
            GET
            </summary>
            <returns>Claims if token is valid</returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Endpoints.DiscoveryEndpointController">
            <summary>
            OpenID Connect discovery document endpoint
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.DiscoveryEndpointController.GetConfiguration">
            <summary>
            GET
            </summary>
            <returns>Discovery document</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.DiscoveryEndpointController.GetKeyData">
            <summary>
            GET for JWKs
            </summary>
            <returns>JSON Web Key set</returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Endpoints.EndSessionController">
            <summary>
            OpenID Connect end session endpoint
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.EndSessionController.#ctor(Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions,Thinktecture.IdentityServer.Core.Validation.EndSessionRequestValidator,Thinktecture.IdentityServer.Core.ResponseHandling.EndSessionResponseGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Endpoints.EndSessionController"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="validator">The validator.</param>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.EndSessionController.Logout">
            <summary>
            GET
            </summary>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.EndSessionController.LogoutCallback">
            <summary>
            Logout callback
            </summary>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Endpoints.UserInfoEndpointController">
            <summary>
            OpenID Connect userinfo endpoint
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.UserInfoEndpointController.#ctor(Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions,Thinktecture.IdentityServer.Core.Validation.TokenValidator,Thinktecture.IdentityServer.Core.ResponseHandling.UserInfoResponseGenerator,Thinktecture.IdentityServer.Core.Validation.BearerTokenUsageValidator)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Endpoints.UserInfoEndpointController"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="tokenValidator">The token validator.</param>
            <param name="generator">The generator.</param>
            <param name="tokenUsageValidator">The token usage validator.</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.UserInfoEndpointController.GetUserInfo(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets the user information.
            </summary>
            <param name="request">The request.</param>
            <returns>userinfo response</returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomGrantValidator">
            <summary>
            Default custom grant validator
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.ICustomGrantValidator">
            <summary>
            Handles validation of token requests using custom grant types
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ICustomGrantValidator.ValidateAsync(Thinktecture.IdentityServer.Core.Validation.ValidatedTokenRequest)">
            <summary>
            Validates the custom grant request.
            </summary>
            <param name="request">The validated token request.</param>
            <returns>A principal</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomGrantValidator.ValidateAsync(Thinktecture.IdentityServer.Core.Validation.ValidatedTokenRequest)">
            <summary>
            Validates the custom grant request.
            </summary>
            <param name="request">The validated token request.</param>
            <returns>
            A principal
            </returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomRequestValidator">
            <summary>
            Default custom request validator
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.ICustomRequestValidator">
            <summary>
            Allows inserting custom validation logic into authorize and token requests
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ICustomRequestValidator.ValidateAuthorizeRequestAsync(Thinktecture.IdentityServer.Core.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Custom validation logic for the authorize request.
            </summary>
            <param name="request">The validated request.</param>
            <returns>The validation result</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ICustomRequestValidator.ValidateTokenRequestAsync(Thinktecture.IdentityServer.Core.Validation.ValidatedTokenRequest)">
            <summary>
            Custom validation logic for the token request.
            </summary>
            <param name="request">The validated request.</param>
            <returns>The validation result</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomRequestValidator.ValidateAuthorizeRequestAsync(Thinktecture.IdentityServer.Core.Validation.ValidatedAuthorizeRequest)">
            <summary>
            Custom validation logic for the authorize request.
            </summary>
            <param name="request">The validated request.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomRequestValidator.ValidateTokenRequestAsync(Thinktecture.IdentityServer.Core.Validation.ValidatedTokenRequest)">
            <summary>
            Custom validation logic for the token request.
            </summary>
            <param name="request">The validated request.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomTokenValidator">
            <summary>
            Default custom token validator
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.ICustomTokenValidator">
            <summary>
            Allows inserting custom token validation logic
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ICustomTokenValidator.ValidateAccessTokenAsync(Thinktecture.IdentityServer.Core.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for access tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>The validation result</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ICustomTokenValidator.ValidateIdentityTokenAsync(Thinktecture.IdentityServer.Core.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for identity tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>The validation result</returns>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomTokenValidator._users">
            <summary>
            The user service
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomTokenValidator._clients">
            <summary>
            The client store
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomTokenValidator.#ctor(Thinktecture.IdentityServer.Core.Services.IUserService,Thinktecture.IdentityServer.Core.Services.IClientStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomTokenValidator"/> class.
            </summary>
            <param name="users">The users store.</param>
            <param name="clients">The client store.</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomTokenValidator.ValidateAccessTokenAsync(Thinktecture.IdentityServer.Core.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for access tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultCustomTokenValidator.ValidateIdentityTokenAsync(Thinktecture.IdentityServer.Core.Validation.TokenValidationResult)">
            <summary>
            Custom validation logic for identity tokens.
            </summary>
            <param name="result">The validation result so far.</param>
            <returns>
            The validation result
            </returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService">
            <summary>
            Default token service
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.ITokenService">
            <summary>
            Logic for creating security tokens
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ITokenService.CreateIdentityTokenAsync(Thinktecture.IdentityServer.Core.Models.TokenCreationRequest)">
            <summary>
            Creates an identity token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>An identity token</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ITokenService.CreateAccessTokenAsync(Thinktecture.IdentityServer.Core.Models.TokenCreationRequest)">
            <summary>
            Creates an access token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>An access token</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.ITokenService.CreateSecurityTokenAsync(Thinktecture.IdentityServer.Core.Models.Token)">
            <summary>
            Creates a serialized and protected security token.
            </summary>
            <param name="token">The token.</param>
            <returns>A security token in serialized form</returns>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService._options">
            <summary>
            The identity server options
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService._claimsProvider">
            <summary>
            The claims provider
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService._tokenHandles">
            <summary>
            The token handles
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService._signingService">
            <summary>
            The signing service
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService.#ctor(Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions,Thinktecture.IdentityServer.Core.Services.IClaimsProvider,Thinktecture.IdentityServer.Core.Services.ITokenHandleStore,Thinktecture.IdentityServer.Core.Services.ITokenSigningService)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="claimsProvider">The claims provider.</param>
            <param name="tokenHandles">The token handles.</param>
            <param name="signingService">The signing service.</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService.CreateIdentityTokenAsync(Thinktecture.IdentityServer.Core.Models.TokenCreationRequest)">
            <summary>
            Creates an identity token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>
            An identity token
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService.CreateAccessTokenAsync(Thinktecture.IdentityServer.Core.Models.TokenCreationRequest)">
            <summary>
            Creates an access token.
            </summary>
            <param name="request">The token creation request.</param>
            <returns>
            An access token
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService.CreateSecurityTokenAsync(Thinktecture.IdentityServer.Core.Models.Token)">
            <summary>
            Creates a serialized and protected security token.
            </summary>
            <param name="token">The token.</param>
            <returns>
            A security token in serialized form
            </returns>
            <exception cref="T:System.InvalidOperationException">Invalid token type.</exception>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultTokenService.HashAdditionalToken(System.String)">
            <summary>
            Hashes an additional token.
            </summary>
            <param name="tokenToHash">The token to hash.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultClaimsProvider">
            <summary>
            Default claims provider implementation
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.IClaimsProvider">
            <summary>
            The claims provider is responsible for determining which claims to include in tokens
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IClaimsProvider.GetIdentityTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Thinktecture.IdentityServer.Core.Models.Client,System.Collections.Generic.IEnumerable{Thinktecture.IdentityServer.Core.Models.Scope},System.Boolean,Thinktecture.IdentityServer.Core.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an identity token
            </summary>
            <param name="subject">The subject</param>
            <param name="client">The client</param>
            <param name="scopes">The requested scopes</param>
            <param name="includeAllIdentityClaims">Specifies if all claims should be included in the token, or if the userinfo endpoint can be used to retrieve them</param>
            <param name="request">The raw request</param>
            <returns>Claims for the identity token</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IClaimsProvider.GetAccessTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Thinktecture.IdentityServer.Core.Models.Client,System.Collections.Generic.IEnumerable{Thinktecture.IdentityServer.Core.Models.Scope},Thinktecture.IdentityServer.Core.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an identity token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <param name="scopes">The requested scopes.</param>
            <param name="request">The raw request.</param>
            <returns>Claims for the access token</returns>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultClaimsProvider.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultClaimsProvider._users">
            <summary>
            The user service
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultClaimsProvider.#ctor(Thinktecture.IdentityServer.Core.Services.IUserService)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultClaimsProvider"/> class.
            </summary>
            <param name="users">The users service</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultClaimsProvider.GetIdentityTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Thinktecture.IdentityServer.Core.Models.Client,System.Collections.Generic.IEnumerable{Thinktecture.IdentityServer.Core.Models.Scope},System.Boolean,Thinktecture.IdentityServer.Core.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an identity token
            </summary>
            <param name="subject">The subject</param>
            <param name="client">The client</param>
            <param name="scopes">The requested scopes</param>
            <param name="includeAllIdentityClaims">Specifies if all claims should be included in the token, or if the userinfo endpoint can be used to retrieve them</param>
            <param name="request">The raw request</param>
            <returns>
            Claims for the identity token
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultClaimsProvider.GetAccessTokenClaimsAsync(System.Security.Claims.ClaimsPrincipal,Thinktecture.IdentityServer.Core.Models.Client,System.Collections.Generic.IEnumerable{Thinktecture.IdentityServer.Core.Models.Scope},Thinktecture.IdentityServer.Core.Validation.ValidatedRequest)">
            <summary>
            Returns claims for an identity token.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <param name="scopes">The requested scopes.</param>
            <param name="request">The raw request.</param>
            <returns>
            Claims for the access token
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultClaimsProvider.GetStandardSubjectClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the standard subject claims.
            </summary>
            <param name="subject">The subject.</param>
            <returns>A list of standard claims</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultClaimsProvider.GetOptionalClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets additional (and optional) claims from the cookie or incoming subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns>Additional claims</returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Models.Client">
            <summary>
            Models an OpenID Connect or OAuth2 client
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Models.Client.#ctor">
            <summary>
            Creates a Client with default values
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.Enabled">
            <summary>
            Specifies if client is enabled (defaults to false)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.ClientId">
            <summary>
            Unique ID of the client
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.ClientSecret">
            <summary>
            Client secret - only relevant for flows that require a secret
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.ClientName">
            <summary>
            Client display name (used for logging and consent screen)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.ClientUri">
            <summary>
            URI to further information about client (used on consent screen)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.LogoUri">
            <summary>
            URI to client logo (used on consent screen)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.RequireConsent">
            <summary>
            Specifies whether a consent screen is required (defaults to false)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.AllowRememberConsent">
            <summary>
            Specifies whether user can choose to store consent decisions (defaults to false)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.Flow">
            <summary>
            Specifies allowed flow for client (either AuthorizationCode, Implicit, Hybrid, ResourceOwner, ClientCredentials or Custom). Defaults to Implicit.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.RedirectUris">
            <summary>
            Specifies allowed URIs to return tokens or authorization codes to
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.PostLogoutRedirectUris">
            <summary>
            Specifies allowed URIs to redirect to after logout
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.ScopeRestrictions">
            <summary>
            Specifies the scopes that the client is allowed to request. If empty, the client can request all scopes (defaults to empty)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.IdentityTokenLifetime">
            <summary>
            Lifetime of identity token in seconds (defaults to 300 seconds / 5 minutes)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.AccessTokenLifetime">
            <summary>
            Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.AuthorizationCodeLifetime">
            <summary>
            Lifetime of authorization code in seconds (defaults to 300 seconds / 5 minutes)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.AbsoluteRefreshTokenLifetime">
            <summary>
            Maximum lifetime of a refresh token in seconds. Defaults to 2592000 seconds / 30 days
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.SlidingRefreshTokenLifetime">
            <summary>
            Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.RefreshTokenUsage">
            <summary>
            Absolute: the refresh token will expire on a fixed point in time (specified by the AbsoluteRefreshTokenLifetime)
            Sliding: when refreshing the token, the lifetime of the refresh token will be renewed (by the amount specified in SlidingRefreshTokenLifetime). The lifetime will not exceed 
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.RefreshTokenExpiration">
            <summary>
            ReUse: the refresh token handle will stay the same when refreshing tokens
            OneTime: the refresh token handle will be updated when refreshing tokens
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.IdentityTokenSigningKeyType">
            <summary>
            Specifies the key material used to sign the identity token. Default for the primary X.509 certificate, ClientSecret for using the client secret as a symmetric key (must be 256 bits in length). Defaults to Default.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.AccessTokenType">
            <summary>
            Specifies whether the access token is a reference token or a self contained JWT token (defaults to Jwt).
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.AllowLocalLogin">
            <summary>
            Specifies if this client can use local accounts, or external IdPs only
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.IdentityProviderRestrictions">
            <summary>
            Specifies which external IdPs can be used with this client (if list is empty all IdPs are allowed). Defaults to empty.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.IncludeJwtId">
            <summary>
            Gets or sets a value indicating whether JWT access tokens should include an identifier
            </summary>
            <value>
            <c>true</c> to add an id; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.Claims">
            <summary>
            Gets or sets the client claims.
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.AlwaysSendClientClaims">
            <summary>
            Gets or sets a value indicating whether client claims should be always included in the access tokens - or only for client credentials flow.
            </summary>
            <value>
            <c>true</c> if claims should always be sent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Client.PrefixClientClaims">
            <summary>
            Gets or sets a value indicating whether all client claims should be prefixed.
            </summary>
            <value>
              <c>true</c> if client claims should be prefixed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Endpoints.AuthorizeEndpointController">
            <summary>
            OAuth2/OpenID Connect authorize endpoint
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.AuthorizeEndpointController.#ctor(Thinktecture.IdentityServer.Core.Services.IViewService,Thinktecture.IdentityServer.Core.Validation.AuthorizeRequestValidator,Thinktecture.IdentityServer.Core.ResponseHandling.AuthorizeResponseGenerator,Thinktecture.IdentityServer.Core.ResponseHandling.AuthorizeInteractionResponseGenerator,Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions,Thinktecture.IdentityServer.Core.Services.ILocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Endpoints.AuthorizeEndpointController"/> class.
            </summary>
            <param name="viewService">The view service.</param>
            <param name="validator">The validator.</param>
            <param name="responseGenerator">The response generator.</param>
            <param name="interactionGenerator">The interaction generator.</param>
            <param name="options">The options.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.AuthorizeEndpointController.Get(System.Net.Http.HttpRequestMessage)">
            <summary>
            GET
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Endpoints.TokenEndpointController">
            <summary>
            OAuth2/OpenID Conect token endpoint
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.TokenEndpointController.#ctor(Thinktecture.IdentityServer.Core.Configuration.IdentityServerOptions,Thinktecture.IdentityServer.Core.Validation.TokenRequestValidator,Thinktecture.IdentityServer.Core.Validation.ClientValidator,Thinktecture.IdentityServer.Core.ResponseHandling.TokenResponseGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Endpoints.TokenEndpointController"/> class.
            </summary>
            <param name="options">The options.</param>
            <param name="requestValidator">The request validator.</param>
            <param name="clientValidator">The client validator.</param>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.TokenEndpointController.Post">
            <summary>
            POST
            </summary>
            <returns>Token response</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Endpoints.TokenEndpointController.ProcessAsync(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Processes the token request
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>Token response</returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Resources.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.ClientIdRequired">
            <summary>
              Looks up a localized string similar to Client Identifier is required.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.invalid_scope">
            <summary>
              Looks up a localized string similar to The client application tried to access a resource it does not have access to..
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.InvalidUsernameOrPassword">
            <summary>
              Looks up a localized string similar to Invalid Username or Password.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.MissingClientId">
            <summary>
              Looks up a localized string similar to client_id is missing.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.MissingToken">
            <summary>
              Looks up a localized string similar to Token is missing.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.MustSelectAtLeastOnePermission">
            <summary>
              Looks up a localized string similar to Must select at least one permission..
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.NoExternalProvider">
            <summary>
              Looks up a localized string similar to The external login provider was not provided..
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.NoMatchingExternalAccount">
            <summary>
              Looks up a localized string similar to Invalid Account.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.NoSignInCookie">
            <summary>
              Looks up a localized string similar to There is an error determining which application you are signing into. Return to the application and try again..
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.NoSubjectFromExternalProvider">
            <summary>
              Looks up a localized string similar to Error authenticating with external provider.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.PasswordRequired">
            <summary>
              Looks up a localized string similar to Password is required.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.SslRequired">
            <summary>
              Looks up a localized string similar to SSL is required.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.unauthorized_client">
            <summary>
              Looks up a localized string similar to The client application tried to access a resource it does not have access to..
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.UnexpectedError">
            <summary>
              Looks up a localized string similar to There was an unexpected error.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.unsupported_response_type">
            <summary>
              Looks up a localized string similar to The authorization server does not support the requested response type..
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.UnsupportedMediaType">
            <summary>
              Looks up a localized string similar to Unsupported Media Type.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Resources.Messages.UsernameRequired">
            <summary>
              Looks up a localized string similar to Username is required.
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryRefreshTokenStore">
            <summary>
            In-memory refresh token store
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryRefreshTokenStore.StoreAsync(System.String,Thinktecture.IdentityServer.Core.Models.RefreshToken)">
            <summary>
            Stores the data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryRefreshTokenStore.GetAsync(System.String)">
            <summary>
            Retrieves the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryRefreshTokenStore.RemoveAsync(System.String)">
            <summary>
            Removes the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryRefreshTokenStore.GetAllAsync(System.String)">
            <summary>
            Retrieves all data for a subject identifier.
            </summary>
            <param name="subject">The subject identifier.</param>
            <returns>
            A list of token metadata
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryRefreshTokenStore.RevokeAsync(System.String,System.String)">
            <summary>
            Revokes all data for a client and subject id combination.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.IConsentService">
            <summary>
            Service to retrieve and update consent.
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IConsentService.RequiresConsentAsync(Thinktecture.IdentityServer.Core.Models.Client,System.Security.Claims.ClaimsPrincipal,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if consent is required.
            </summary>
            <param name="client">The client.</param>
            <param name="subject">The user.</param>
            <param name="scopes">The scopes.</param>
            <returns>Boolean if consent is required.</returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.IConsentService.UpdateConsentAsync(Thinktecture.IdentityServer.Core.Models.Client,System.Security.Claims.ClaimsPrincipal,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates the consent.
            </summary>
            <param name="client">The client.</param>
            <param name="subject">The subject.</param>
            <param name="scopes">The scopes.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryAuthorizationCodeStore">
            <summary>
            In-memory authorization code store
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryAuthorizationCodeStore.GetAsync(System.String)">
            <summary>
            Retrieves the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryAuthorizationCodeStore.RemoveAsync(System.String)">
            <summary>
            Removes the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryAuthorizationCodeStore.GetAllAsync(System.String)">
            <summary>
            Retrieves all data for a subject identifier.
            </summary>
            <param name="subject">The subject identifier.</param>
            <returns>
            A list of token metadata
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryAuthorizationCodeStore.RevokeAsync(System.String,System.String)">
            <summary>
            Revokes all data for a client and subject id combination.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryClientStore">
            <summary>
            In-memory client store
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryClientStore.#ctor(System.Collections.Generic.IEnumerable{Thinktecture.IdentityServer.Core.Models.Client})">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryClientStore"/> class.
            </summary>
            <param name="clients">The clients.</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryClientStore.FindClientByIdAsync(System.String)">
            <summary>
            Finds a client by id
            </summary>
            <param name="clientId">The client id</param>
            <returns>
            The client
            </returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultConsentService">
            <summary>
            Default consent service
            </summary>
        </member>
        <member name="F:Thinktecture.IdentityServer.Core.Services.Default.DefaultConsentService._store">
            <summary>
            The consent store
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.Default.DefaultConsentService.#ctor(Thinktecture.IdentityServer.Core.Services.IConsentStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Services.Default.DefaultConsentService"/> class.
            </summary>
            <param name="store">The consent store.</param>
            <exception cref="T:System.ArgumentNullException">store</exception>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryScopeStore">
            <summary>
            In-memory scope store
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryScopeStore.#ctor(System.Collections.Generic.IEnumerable{Thinktecture.IdentityServer.Core.Models.Scope})">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryScopeStore"/> class.
            </summary>
            <param name="scopes">The scopes.</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryScopeStore.FindScopesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets all scopes.
            </summary>
            <returns>
            List of scopes
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryScopeStore.GetScopesAsync(System.Boolean)">
            <summary>
            Gets all defined scopes.
            </summary>
            <param name="publicOnly">if set to <c>true</c> only public scopes are returned.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryTokenHandleStore">
            <summary>
            In-memory token handle store
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryTokenHandleStore.StoreAsync(System.String,Thinktecture.IdentityServer.Core.Models.Token)">
            <summary>
            Stores the data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryTokenHandleStore.GetAsync(System.String)">
            <summary>
            Retrieves the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryTokenHandleStore.RemoveAsync(System.String)">
            <summary>
            Removes the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryTokenHandleStore.GetAllAsync(System.String)">
            <summary>
            Retrieves all data for a subject identifier.
            </summary>
            <param name="subject">The subject identifier.</param>
            <returns>
            A list of token metadata
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryTokenHandleStore.RevokeAsync(System.String,System.String)">
            <summary>
            Revokes all data for a client and subject id combination.
            </summary>
            <param name="subject">The subject.</param>
            <param name="client">The client.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser">
            <summary>
            In-memory user
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser"/> class.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser.Username">
            <summary>
            Gets or sets the username.
            </summary>
            <value>
            The username.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser.Provider">
            <summary>
            Gets or sets the provider.
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser.ProviderId">
            <summary>
            Gets or sets the provider identifier.
            </summary>
            <value>
            The provider identifier.
            </value>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser.Claims">
            <summary>
            Gets or sets the claims.
            </summary>
            <value>
            The claims.
            </value>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUserService">
            <summary>
            In-memory user service
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUserService.#ctor(System.Collections.Generic.List{Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUser})">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUserService"/> class.
            </summary>
            <param name="users">The users.</param>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUserService.PreAuthenticateAsync(Thinktecture.IdentityServer.Core.Models.SignInMessage)">
            <summary>
            This methods gets called before the login page is shown. This allows you to authenticate the user somehow based on data coming from the host (e.g. client certificates or trusted headers)
            </summary>
            <param name="message">The signin message.</param>
            <returns>
            The authentication result or null to continue the flow
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUserService.AuthenticateLocalAsync(System.String,System.String,Thinktecture.IdentityServer.Core.Models.SignInMessage)">
            <summary>
            This methods gets called for local authentication (whenever the user uses the username and password dialog).
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="message">The signin message.</param>
            <returns>
            The authentication result
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUserService.AuthenticateExternalAsync(Thinktecture.IdentityServer.Core.Models.ExternalIdentity,Thinktecture.IdentityServer.Core.Models.SignInMessage)">
            <summary>
            This method gets called when the user uses an external identity provider to authenticate.
            </summary>
            <param name="externalUser">The external user.</param>
            <param name="message">The signin message.</param>
            <returns>
            The authentication result.
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUserService.GetProfileDataAsync(System.Security.Claims.ClaimsPrincipal,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This method is called whenever claims about the user are requested (e.g. during token creation or via the userinfo endpoint)
            </summary>
            <param name="subject">The subject.</param>
            <param name="requestedClaimTypes">The requested claim types.</param>
            <returns>
            Claims
            </returns>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUserService.IsActiveAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            This method gets called whenever identity server needs to determine if the user is valid or active (e.g. during token issuance or validation)
            </summary>
            <param name="subject">The subject.</param>
            <returns>
            true or false
            </returns>
            <exception cref="T:System.ArgumentNullException">subject</exception>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Services.InMemory.InMemoryUserService.SignOutAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            This method gets called when the user signs out (allows to cleanup resources)
            </summary>
            <param name="subject">The subject.</param>
            <returns></returns>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Models.Scope">
            <summary>
            Models are resource (either identity resource or web api resource)
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Models.Scope.#ctor">
            <summary>
            Creates a Scope with default values
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Scope.Enabled">
            <summary>
            Scope enabled
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Scope.Name">
            <summary>
            Name of the scope. This is the value a client will use to request the scope.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Scope.DisplayName">
            <summary>
            Display name. This value will be used e.g. on the consent screen.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Scope.Description">
            <summary>
            Description. This value will be used e.g. on the consent screen.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Scope.Required">
            <summary>
            Specifies whether the user can de-select the scope on the consent screen.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Scope.Emphasize">
            <summary>
            Specifies whether the consent screen will emphasize this scope. Use this setting for sensitive or important scopes.
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Scope.Type">
            <summary>
            Specifies whether this scope is about identity information from the userinfo endpoint, or a resource (e.g. a Web API)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Scope.Claims">
            <summary>
            List of user claims that should be included in the identity (identity scope) or access token (resource scope). 
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Scope.IncludeAllClaimsForUser">
            <summary>
            If enabled, all claims for the user will be included in the token
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Scope.ClaimsRule">
            <summary>
            Rule for determining which claims should be included in the token (this is implementation specific)
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.Scope.ShowInDiscoveryDocument">
            <summary>
            Specifies whether this scope is shown in the discovery document (defaults to true)
            </summary>
        </member>
        <member name="T:Thinktecture.IdentityServer.Core.Models.ScopeClaim">
            <summary>
            Models a claim that should be emitted in a token
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Models.ScopeClaim.#ctor">
            <summary>
            Creates an empty ScopeClaim
            </summary>
        </member>
        <member name="M:Thinktecture.IdentityServer.Core.Models.ScopeClaim.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a ScopeClaim with parameters
            </summary>
            <param name="name">Name of the claim</param>
            <param name="alwaysInclude">Specifies whether this claim should always be present in the identity token (even if an access token has been requested as well). Applies to identity scopes only.</param>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.ScopeClaim.Name">
            <summary>
            Name of the claim
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.ScopeClaim.Description">
            <summary>
            Description of the claim
            </summary>
        </member>
        <member name="P:Thinktecture.IdentityServer.Core.Models.ScopeClaim.AlwaysIncludeInIdToken">
            <summary>
            Specifies whether this claim should always be present in the identity token (even if an access token has been requested as well). Applies to identity scopes only.
            </summary>
        </member>
    </members>
</doc>
